{"version":3,"sources":["config/route-config.ts","components/app/ErrorBoundary.tsx","services/alphavintage-api/api.ts","domain/Stock/index.ts","services/baseRequestService.ts","services/alphavintage-api/index.ts","services/alphavintage-api/configuration.ts","context/global/stocks/stocks-actions.ts","config/style-config.ts","context/global/stocks/stocks-reducer.ts","context/global/global-reducer.ts","context/global/GlobalContext.ts","components/stocks/Stocks.tsx","components/app/Routes.tsx","context/global/GlobalContextProvider.tsx","components/app/App.tsx","index.tsx","assets/trading.jpg"],"names":["RoutePath","ErrorBoundary","state","hasError","this","setState","props","children","Component","configuration","basePath","BestMatchesEnum","parseParams","params","keys","Object","options","forEach","key","isParamTypeObject","isParamTypeArray","length","element","slice","baseRequestService","endpoint","a","method","Promise","reject","console","log","axios","then","response","data","BASE_PATH","replace","RequiredError","field","msg","name","Error","AVApiFetchParamCreator","getTimeSeriesDaily","symbol","outputsize","datatype","localVarRequestOptions","assign","localVarQueryParameter","apiKey","localVarApiKeyValue","apikey","url","searchSymbols","keywords","AVApiFp","localVarFetchArgs","catch","err","config","param","ApiFactory","StocksActionType","facebookBestMatch","generateDataTracesDomain","item","x","y","map","type","mode","line","color","width","textinfo","text","hoverinfo","layout","title","xaxis","range","Date","now","rangeselector","buttons","count","label","step","stepmode","rangeslider","yaxis","autorange","height","showlegend","Colors","Fonts","FontWeight","Breakpoints","addCompaniesAction","companies","ADD_COMPANIES","payload","stocksReducer","action","ADD_COMPANY","findIndex","el","company","initialState","stocks","globalReducer","GlobalContext","createContext","dispatch","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","palette","secondary","container","marginTop","image","position","top","left","zIndex","img","flex","maxWidth","linearProgress","Stocks","classes","fixedOptions","useCookies","cookies","setCookie","removeCookie","useState","countDown","setCountDown","dataTraces","setDataTraces","searchedCompanies","setSearchedCompany","errors","setErrors","loading","setLoading","useContext","useEffect","generateDataTraces","shoreline","countDownDate","moment","setInterval","diff","clearInterval","utc","format","queryPromises","all","queryResponses","withoutError","filter","Note","message","add","expires","toDate","companiesWithoutApiError","find","flatMap","handleTextInput","ev","preventDefault","target","value","query","bestMatches","Grid","direction","justify","sm","xs","alignContent","alignItems","src","logo","className","Autocomplete","multiple","id","disabled","onChange","event","newValue","option","indexOf","handleAutoComplete","getOptionLabel","renderTags","tagValue","getTagProps","index","Chip","style","minWidth","renderInput","onSubmit","TextField","variant","placeholder","Alert","IconButton","aria-label","size","onClick","fontSize","severity","LinearProgress","responsive","autosizable","showSources","paddingBottom","marginBottom","Routes","data-testid","exact","path","Index","to","GlobalContextProvider","useReducer","Provider","appTheme","typography","fontFamily","FONT_FAMILY","fontWeightMedium","MEDIUM","body2","primary","main","PRIMARY_MAIN_COLOR","dark","PRIMARY_DARK_COLOR","SUCCESS_COLOR","error","ERROR_MAIN_COLOR","breakpoints","values","XS","SM","md","MD","lg","LG","xl","XL","createMuiTheme","App","CookiesProvider","window","renderShoreline","containerId","elem","document","getElementById","ReactDOM","render","unmountShoreline","unmountComponentAtNode","isRenderedByContainer","module","exports"],"mappings":"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","file":"static/js/main.74d024fd.chunk.js","sourcesContent":["export enum RoutePath {\n  Index = '/',\n  Stocks = '/stocks'\n}","import React, { Component, PropsWithChildren } from 'react';\n\nexport class ErrorBoundary extends Component<PropsWithChildren<{}>> {\n  state: { hasError: boolean } = { hasError: false };\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <p>The application is temporarily unavailable</p>\n    ) : (\n      this.props.children\n    );\n  }\n}\n","import * as url from 'url';\nimport { baseRequestService } from '../baseRequestService';\n\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"https://www.alphavantage.co/query?\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n  readonly url?: string\n  readonly options: any;\n}\n\nexport class RequiredError extends Error {\n  name: \"RequiredError\"\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n\nexport const AVApiFetchParamCreator = function (configuration?: Configuration) {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize?: string, datatype?: string, options: any = {}): FetchArgs {\n      if (!symbol) {\n        throw new RequiredError('symbol', 'Required parameter symbol was null or undefined when calling getTimesSeriesDaily');\n      }\n\n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n      const localVarQueryParameter = {} as any;\n\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = configuration.apiKey;\n        localVarQueryParameter[\"apikey\"] = localVarApiKeyValue;\n        localVarQueryParameter[\"basePath\"] = configuration.basePath\n      }\n\n      localVarRequestOptions['params'] = {\n        apikey: localVarQueryParameter.apikey\n      }\n\n      localVarRequestOptions['params']['function'] = 'TIME_SERIES_DAILY'\n\n      if (symbol) {\n        localVarRequestOptions['params']['symbol'] = symbol\n      };\n\n      if (outputsize) {\n        localVarRequestOptions['params']['outputsize'] = outputsize\n      }\n\n      if (datatype) {\n        localVarRequestOptions['params']['datatype'] = datatype\n      }\n\n      return {\n        url: '',\n        options: localVarRequestOptions\n      }\n    },\n    searchSymbols(keywords: string, datatype?: string, options: any = {}): FetchArgs {\n      if (!keywords) {\n        throw new RequiredError('keywords', 'Required parameter keywords was null or undefined when calling searchSymbols');\n      }\n\n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n      const localVarQueryParameter = {} as any;\n\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = configuration.apiKey;\n        localVarQueryParameter[\"apikey\"] = localVarApiKeyValue;\n        localVarQueryParameter[\"basePath\"] = configuration.basePath\n      }\n\n      localVarRequestOptions['params'] = {\n        apikey: localVarQueryParameter.apikey\n      }\n\n      if (keywords) {\n        localVarRequestOptions['params']['keywords'] = keywords\n      }\n\n      localVarRequestOptions['params']['function'] = 'SYMBOL_SEARCH'\n\n\n      if (datatype) {\n        localVarRequestOptions['params']['datatype'] = datatype\n      }\n\n      return {\n        url: '',\n        options: localVarRequestOptions\n      }\n    }\n  }\n}\n\nconst AVApiFp = function (configuration?: Configuration) {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize?: string, datatype?: string, options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = AVApiFetchParamCreator(configuration).getTimeSeriesDaily(symbol, outputsize, datatype, options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n    searchSymbols(keywords: string, datatype?: string, options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = AVApiFetchParamCreator(configuration).searchSymbols(keywords, datatype, options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n  }\n}\n\nexport const AVApiFactory = (configuration?: Configuration, basePath?: string) => {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize: string = 'full', datatype?: string, options?: any) {\n      return AVApiFp(configuration).getTimeSeriesDaily(symbol, outputsize, datatype, options)(basePath)\n    },\n    searchSymbols(keywords: string, datatype?: string, options?: any) {\n      return AVApiFp(configuration).searchSymbols(keywords, datatype, options)(basePath)\n    }\n  }\n}","export interface BestMatches {\n  readonly '1. symbol'?: string\n  readonly '2. name'?: string\n  readonly '3. type'?: string\n  readonly '4. region'?: string\n  readonly '8. currency'?: string\n}\n\nexport enum BestMatchesEnum {\n  symbol = '1. symbol',\n  name = '2. name',\n  type = '3. type',\n  region = '4. region?',\n  currency = '8. currency?'\n}\n\nexport interface MetaDataItem {\n  readonly '1. Information': string\n  readonly '2. Symbol': string\n  readonly '3. Last Refreshed': string\n  readonly '4. Output Size': string\n  readonly '5. Time Zone': string\n}\n\nexport interface TimeSeriesItem {\n  readonly '1. open'?: string\n  readonly '2. high'?: string\n  readonly '3. low'?: string\n  readonly '4. close'?: string\n  readonly '5. volume'?: string\n}\n\nexport interface TimeSeriesDaily {\n  readonly 'Meta Data': MetaDataItem\n  readonly 'Time Series (Daily)': TimeSeriesItem[]\n  readonly 'Note'?: string\n}\n\nexport interface DataTraceItem {\n  x: string[]\n  y: string[]\n}\n\nexport interface DataTraceItemCustom extends DataTraceItem {\n  readonly type: any\n  readonly mode: any\n  readonly name: any\n  readonly line?: any\n  readonly text?: any\n  readonly hovertext?: any\n  readonly hoverinfo?: any\n  readonly title?: any\n  readonly textinfo?: any\n\n}\n\nexport const facebookBestMatch: BestMatches = {\n  '1. symbol': \"FB\",\n  '2. name': \"Facebook Inc.\",\n  '3. type': \"Equity\",\n  '4. region': \"United States\",\n  '8. currency': \"USD\",\n};\n\nexport const extractXY = (data: any): DataTraceItem => {\n  const x: string[] = Object.keys(data);\n  const y: string[] = Object.keys(data).map((item: string) => {\n    let key: any = Object.keys(data[item])[0];\n    return data[item][key];\n  })\n\n  return {\n    x, y\n  }\n}\n\nexport const generateDataTracesDomain = (item: TimeSeriesDaily): DataTraceItemCustom => {\n  const { x, y } = extractXY(item[\"Time Series (Daily)\"]);\n  const trace = {\n    x,\n    y,\n    type: \"scatter\",\n    mode: \"lines\",\n    name: item[\"Meta Data\"][\"2. Symbol\"],\n    line: {\n      color: 'rgb(55, 128, 191)',\n      width: 1\n    },\n    textinfo: 'label+text',\n    text: item[\"Meta Data\"][\"2. Symbol\"],\n    hoverinfo: 'x+y+text',\n  }\n\n  return trace;\n}\n\nexport const layout: any = {\n  title: 'Shoreline Stock Market Chart',\n  xaxis: {\n    // autorange: true,\n    color: '#7f7f7f',\n    range: ['2010-02-17', Date.now()],\n    rangeselector: {\n      buttons: [\n        {\n          count: 1,\n          label: '1m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        {\n          count: 6,\n          label: '6m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        { step: 'all' }\n      ]\n    },\n    rangeslider: { range: ['2015-02-17', Date.now()] },\n    type: 'date'\n  },\n  yaxis: {\n    color: '#7f7f7f',\n    autorange: true,\n    range: [86.8700008333, 138.870004167],\n    type: 'linear'\n  },\n  height: 500,\n  showlegend: false,\n};","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport qs from 'qs';\n\nconst parseParams = (params: any) => {\n  const keys = Object.keys(params);\n  let options = '';\n\n  keys.forEach((key) => {\n    const isParamTypeObject = typeof params[key] === 'object';\n    const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n\n    if (!isParamTypeObject) {\n      options += `${key}=${params[key]}&`;\n    }\n\n    if (isParamTypeObject && isParamTypeArray) {      \n      params[key].forEach((element: any) => {\n        options += `${key}=${element}&`;\n      });\n    }\n  });\n\n  return options ? options.slice(0, -1) : options;\n};\n\nconst baseRequestService = async (\n  endpoint: string,\n  options: AxiosRequestConfig\n): Promise<any> => {\n    try {\n      if (!endpoint || !options?.method) {\n        return Promise.reject(\"Please enter endpoint\")\n      };\n\n      if (options.method === 'GET') {\n\n        options['paramsSerializer'] = params => {\n          return  parseParams(params)\n        }\n      }\n\n      console.log('endpoint:', endpoint, 'options:', options);\n\n      return axios(endpoint, options).then(response=> {\n        console.log(response);\n        return response.data\n      })\n    } catch (err) {\n      \n      console.log('err', err)\n      return Promise.reject(err);\n    }\n \n};\n\nexport {\n  baseRequestService\n};\n","import { Configuration } from './configuration'\nimport { AVApiFactory } from './api';\n\nconst config = new Configuration({\n  apiKey: 'PBZQEWAEXCFONYE9',\n  basePath: 'https://www.alphavantage.co/query?'\n})\n\nconst ApiFactory = AVApiFactory(config)\n\nexport default ApiFactory;","export interface ConfigurationParameters {\n  apiKey?: string | ((name: string) => string);\n  basePath?: string;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | ((name: string) => string);\n  \n  /**\n   * override base path\n   * \n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n\n  constructor(param: ConfigurationParameters = {}) {\n      this.apiKey = param.apiKey;\n      this.basePath = param.basePath;\n  }\n}\n","import { BestMatches } from 'domain/Stock';\nimport { Action } from '../../Action';\n\nexport enum StocksActionType {\n  ADD_COMPANY = 'ADD_COMPANY',\n  ADD_COMPANIES = 'ADD_COMPANIES'\n}\n\nexport interface AddCompanyAction extends Action {\n  type: StocksActionType.ADD_COMPANY,\n  payload: {\n    company: BestMatches\n  }\n}\n\nconst addCompanyAction = (\n  company: BestMatches\n): AddCompanyAction => ({\n  type: StocksActionType.ADD_COMPANY,\n  payload: {\n    company\n  }\n})\n\nexport interface AddCompaniesAction extends Action {\n  type: StocksActionType.ADD_COMPANIES,\n  payload: {\n    companies: BestMatches[]\n  }\n}\n\nconst addCompaniesAction = (\n  companies: BestMatches[]\n): AddCompaniesAction => ({\n  type: StocksActionType.ADD_COMPANIES,\n  payload: {\n    companies\n  }\n})\n\nexport type StocksAction = AddCompanyAction | AddCompaniesAction\n\nexport {\n  addCompanyAction,\n  addCompaniesAction\n};","export enum Colors {\n  PRIMARY_MAIN_COLOR = '#0f99d6',\n  PRIMARY_DARK_COLOR = '#034694',\n  SUCCESS_COLOR = '#8dc63f',\n  ERROR_MAIN_COLOR = '#ff0000',\n  SWITCH_LIGHT_BLUE = '#cfebf7',\n  SWITCH_LIGHT_GREY = '#b0b0b0',\n  SWITCH_DISABLED_GREY = '#efefef',\n  SWITCH_DARK_GREY = '#505050',\n  BLACK_MEDIUM = 'rgba(0, 0, 0, 0.8)',\n  WHITE = '#fff',\n  BLACK = '#000',\n  CARD_BORDER = '#f0f0f0'\n}\n\nexport enum Fonts {\n  FONT_FAMILY = '\"Open Sans\", \"Helvetica\", \"Arial\", sans-serif'\n}\nexport enum FontWeight {\n  MEDIUM = 600\n}\n\nexport enum Breakpoints {\n  XS = 0,\n  SM = 576,\n  MD = 768,\n  LG = 992,\n  XL = 1200\n}\n\nexport const appTheme = {\n  typography: {\n    fontFamily: Fonts.FONT_FAMILY,\n    fontWeightMedium: FontWeight.MEDIUM,\n    body2: {\n      fontSize: '0.75rem'\n    }\n  },\n  palette: {\n    primary: {\n      main: Colors.PRIMARY_MAIN_COLOR,\n      dark: Colors.PRIMARY_DARK_COLOR\n    },\n    secondary: {\n      main: Colors.SUCCESS_COLOR\n    },\n    error: {\n      main: Colors.ERROR_MAIN_COLOR\n    }\n  },\n  breakpoints: {\n    values: {\n      xs: Breakpoints.XS,\n      sm: Breakpoints.SM,\n      md: Breakpoints.MD,\n      lg: Breakpoints.LG,\n      xl: Breakpoints.XL\n    }\n  }\n};\n","import { BestMatches, BestMatchesEnum } from 'domain/Stock';\nimport { StocksAction, StocksActionType } from './stocks-actions';\n\nexport interface StocksState {\n  companies: BestMatches[]\n};\n\nexport const stocksInitialState: StocksState = {\n  companies: [\n    {\n      '1. symbol': \"FB\",\n      '2. name': \"Facebook Inc.\",\n      '3. type': \"Equity\",\n      '4. region': \"United States\",\n      '8. currency': \"USD\",\n    }\n  ]\n};\n\nexport const stocksReducer = (\n  state: StocksState,\n  action: StocksAction\n): StocksState => {\n  switch (action.type) {\n    case StocksActionType.ADD_COMPANY:\n      let index = state.companies.findIndex(el => el[BestMatchesEnum.symbol] == action.payload.company[BestMatchesEnum.symbol]);\n\n      if (index == -1) {\n        return {\n          companies: [...state.companies, action.payload.company]\n        }\n      };\n\n      return state;\n    case StocksActionType.ADD_COMPANIES:\n      return {\n        companies: [...action.payload.companies]\n      };\n    default:\n      return state;\n  }\n}","import { GenericObject } from 'utils/GenericObject';\nimport { AnyAction } from '../AnyAction';\nimport { stocksInitialState, stocksReducer, StocksState } from './stocks/stocks-reducer';\n\nexport interface GlobalState {\n  stocks: StocksState\n}\n\nexport const initialState: GlobalState = {\n  stocks: stocksInitialState\n};\n\nexport const globalReducer = (\n  state: GlobalState,\n  action: AnyAction\n) : GlobalState => {\n  const { stocks } = state;\n\n  return {\n    stocks: stocksReducer(stocks, action)\n  }\n};\n","import { createContext, Dispatch, useContext } from 'react';\n\nimport { GlobalState, initialState} from './global-reducer';\nimport { Action } from '../Action';\n\nexport interface GlobalContextValue extends GlobalState {\n  dispatch: Dispatch<Action>\n};\n\nexport const GlobalContext = createContext<GlobalContextValue>({\n  ...initialState,\n  dispatch: () => {}\n});\n\nexport const useGlobalContext = (): GlobalContextValue =>\n  useContext(GlobalContext);\n","import React, { useState, useEffect } from 'react';\nimport Plot from 'react-plotly.js';\nimport { useCookies } from 'react-cookie';\nimport moment, { MomentInput } from 'moment';\n\nimport { Chip, Grid, IconButton, LinearProgress, makeStyles, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ApiFactory from '../../services/alphavintage-api';\nimport { BestMatches, BestMatchesEnum, DataTraceItemCustom, facebookBestMatch, generateDataTracesDomain, layout, TimeSeriesDaily } from 'domain/Stock'\nimport { BasicError } from 'domain/Global'\nimport { useGlobalContext } from 'context/global/GlobalContext';\nimport { addCompaniesAction } from 'context/global/stocks/stocks-actions';\nimport logo from '../../assets/trading.jpg'\nimport { Alert } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  container: {\n    marginTop: 10\n  },\n  image: {\n    position: 'absolute',\n    top: 0,\n    left: 20,\n    zIndex: -2,\n    width: 300\n  },\n  img: {\n    flex: 1,\n    padding: 40,\n    maxWidth: '35%'\n  },\n  linearProgress: {\n    width: '70%'\n  }\n}));\n\nexport const Stocks = () => {\n  const classes = useStyles();\n  const fixedOptions: BestMatches[] = [facebookBestMatch];\n\n  const [cookies, setCookie, removeCookie] = useCookies(['shoreline']);\n\n  const [countDown, setCountDown] = useState<string>('');\n  const [dataTraces, setDataTraces] = useState<DataTraceItemCustom[]>();\n  const [searchedCompanies, setSearchedCompany] = useState<BestMatches[]>([]);\n  const [errors, setErrors] = useState<BasicError[]>()\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const {\n    stocks: {\n      companies\n    },\n    dispatch\n  } = useGlobalContext();\n\n  useEffect(() => {\n    generateDataTraces();\n  }, [companies]);\n\n  useEffect(() => {\n    if (cookies.shoreline) {\n      let countDownDate = moment(cookies.shoreline);\n\n      let x = setInterval(function () {\n        let diff = countDownDate.diff(moment());\n\n        if (diff <= 0) {\n          clearInterval(x);\n          setCountDown('')\n        } else\n          setCountDown(moment.utc(diff).format(\"HH:mm:ss\"))\n\n      }, 1000);\n    } else {\n      setErrors([])\n    }\n  }, [cookies])\n\n  useEffect(() => {\n    if (countDown === '') {\n      removeCookie('shoreline');\n    };\n  }, [countDown])\n\n  const generateDataTraces = async () => {\n    try {\n        setLoading(true)\n        let queryPromises: Promise<TimeSeriesDaily>[] = companies.map((item: BestMatches) => ApiFactory.getTimeSeriesDaily(item[BestMatchesEnum.symbol]!))\n        let queryResponses: TimeSeriesDaily[] = await Promise.all(queryPromises);\n        let withoutError = queryResponses.filter((item: TimeSeriesDaily) => !item.Note);\n\n        if (queryResponses.length !== withoutError.length) {\n          setErrors([{\n            message: 'Thank you for using Shoreline! Our standard API call frequency is 5 calls per minute and 500 calls per day.'\n          }])\n\n        if (!cookies.shoreline) {\n          setCookie('shoreline', moment().add(1, 'minutes'), {\n            expires: moment().add(1, 'minutes').toDate()\n          });\n\n        }\n\n        let companiesWithoutApiError = companies.filter((company: BestMatches) =>\n          withoutError.find((item: TimeSeriesDaily) => company[\"1. symbol\"] === item[\"Meta Data\"][\"2. Symbol\"])\n        )\n\n        dispatch(addCompaniesAction(companiesWithoutApiError))\n        setLoading(false)\n\n      } else {\n        let dataTraces: DataTraceItemCustom[] = withoutError.flatMap((item: TimeSeriesDaily) =>\n          item[\"Time Series (Daily)\"] ? generateDataTracesDomain(item) : []\n        );\n\n        setDataTraces(dataTraces)\n        setLoading(false)\n      }\n    } catch (err) {\n      setErrors([{\n        message: 'Something went wrong, please try again'\n      }])\n    }\n  }\n\n\n  const handleTextInput = async (ev: any) => {\n    try {\n      ev.preventDefault();\n      if (!ev.target[0].value) return;\n\n      let query = ev.target[0].value\n      let {\n        bestMatches\n      }: {\n        bestMatches: BestMatches[]\n      } = await ApiFactory.searchSymbols(query);\n\n      setSearchedCompany(bestMatches);\n    } catch (err) {\n      setErrors([{\n        message: 'Something went wrong, please try again'\n      }])\n    }\n  }\n\n  const handleAutoComplete = (newValue: BestMatches[]) => {\n    dispatch(addCompaniesAction([\n      ...newValue.filter((option: BestMatches) => fixedOptions.indexOf(option) === -1!),\n    ]))\n  }\n\n  return (\n    <div>\n      <Grid container direction=\"column\" justify=\"center\" >\n        <Grid\n          container\n          justify=\"center\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <img src={logo} className={classes.img} />\n          <Autocomplete\n            multiple\n            id=\"fixed-tags-demo\"\n            value={companies}\n            disabled={!!cookies.shoreline}\n            onChange={(event, newValue) => handleAutoComplete(newValue)}\n            options={searchedCompanies}\n            getOptionLabel={(option: BestMatches) => option[\"2. name\"]!}\n            renderTags={(tagValue, getTagProps) =>\n              tagValue.map((option, index) => (\n                <Chip\n                  label={option[\"1. symbol\"]}\n                  {...getTagProps({ index })}\n                  disabled={fixedOptions.indexOf(option) !== -1}\n                />\n              ))\n            }\n            style={{ minWidth: '50vw' }}\n            renderInput={(params) => (\n              <form onSubmit={handleTextInput}>\n                <TextField\n                  {...params}\n                  id=\"filled-basic\"\n                  label=\"Search Company\"\n                  variant=\"outlined\"\n                  placeholder={`Search Company`} />\n              </form>\n            )}\n          />\n        </Grid>\n\n        <Grid\n          container\n          justify=\"center\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <div>\n            {errors && errors.map((item: BasicError) => (\n              <Alert\n                action={\n                  <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                      setErrors([...errors.filter((err: BasicError) => item.message !== item.message)]);\n                    }}\n                  >\n                    <CloseIcon fontSize=\"inherit\" />\n                  </IconButton>\n                }\n                severity=\"error\">{item.message} </Alert>\n            ))}\n          </div>\n          {cookies.shoreline ?\n            <Alert severity=\"info\">Api available again in {countDown}</Alert> : ''\n          }\n        </Grid>\n\n        {loading ? <Grid container justify=\"center\" className={classes.container}>\n          <LinearProgress className={classes.linearProgress} />\n          <LinearProgress color=\"primary\" className={classes.linearProgress} /> </Grid> :\n          <Grid item><Plot\n            data={dataTraces || []}\n            layout={layout}\n            config={{\n              responsive: true,\n              // fillFrame: true,\n              // frameMargins: 100,\n              autosizable: true,\n              // editable: false,\n              showSources: true\n            }}\n            style={{ paddingBottom: 100, marginBottom: 50 }}\n          />\n          </Grid>\n        }\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { RoutePath } from '../../config/route-config';\nimport { Stocks } from 'components/stocks/Stocks';\n\nexport const routesTestId = 'RoutesComponent';\n\nexport const Routes = () => (\n  <div data-testid={routesTestId}>\n    <Switch>\n      <Route exact path={RoutePath.Index}>\n        <Stocks/>\n      </Route>\n\n      <Route path={RoutePath.Index}>\n        <Redirect to={RoutePath.Index}/>\n      </Route>\n    </Switch>\n  </div>\n);\n","import React, { useReducer, ReactNode } from 'react';\n\nimport { globalReducer, GlobalState, initialState } from './global-reducer';\nimport { GlobalContext } from './GlobalContext';\n\nexport const GlobalContextProvider = (props: { children: ReactNode }) => {\n  const [state, dispatch]: [GlobalState, any]= useReducer(globalReducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={{ ...state, dispatch }}>\n      {props.children}\n    </GlobalContext.Provider>\n  )\n};","import React from 'react';\nimport './App.css';\nimport { CookiesProvider } from 'react-cookie';\nimport { ErrorBoundary } from './ErrorBoundary';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nimport { Routes } from './Routes';\nimport { GlobalContextProvider } from 'context/global/GlobalContextProvider';\nimport { appTheme } from 'config/style-config';\n\nconst theme = createMuiTheme(appTheme);\n\nconst App = (props: any) => {\n  return (\n    <div className=\"App\">\n      <CookiesProvider>\n      <ErrorBoundary>\n        <MuiThemeProvider theme={theme}>\n          <BrowserRouter >\n            <GlobalContextProvider>\n              <Routes />\n            </GlobalContextProvider>\n          </BrowserRouter>\n        </MuiThemeProvider>\n      </ErrorBoundary>\n      </CookiesProvider>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/app/App';\n\nwindow.renderShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n\n  if (elem) {\n    ReactDOM.render(<App/>, elem);\n  }\n};\n\nwindow.unmountShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n  if (elem) {\n    ReactDOM.unmountComponentAtNode(elem);\n  }\n};\n\nif (!window.isRenderedByContainer) {\n\n  window.renderShoreline('root');\n\n}\n","module.exports = __webpack_public_path__ + \"static/media/trading.d1bc8b19.jpg\";"],"sourceRoot":""}
{"version":3,"sources":["config/route-config.ts","services/alphavintage-api/api.ts","domain/Stock/index.ts","services/baseRequestService.ts","services/alphavintage-api/index.ts","context/global/stocks/stocks-actions.ts","config/style-config.ts","context/global/stocks/stocks-reducer.ts","context/global/global-reducer.ts","context/global/GlobalContext.ts","components/stocks/CustomPlot.tsx","components/stocks/Stocks.tsx","components/app/Routes.tsx","context/global/GlobalContextProvider.tsx","components/app/App.tsx","index.tsx","assets/stock-market_1.png"],"names":["RoutePath","configuration","basePath","BestMatchesEnum","parseParams","params","keys","Object","options","forEach","key","isParamTypeObject","isParamTypeArray","length","element","slice","baseRequestService","endpoint","a","method","Promise","reject","axios","then","response","data","console","log","BASE_PATH","replace","RequiredError","field","msg","name","Error","AVApiFetchParamCreator","getTimeSeriesDaily","symbol","outputsize","datatype","localVarRequestOptions","assign","localVarQueryParameter","apiKey","localVarApiKeyValue","apikey","url","searchSymbols","keywords","AVApiFp","localVarFetchArgs","catch","err","ApiFactory","StocksActionType","facebookBestMatch","generateDataTracesDomain","item","x","y","map","type","mode","line","color","width","marker","size","textinfo","text","hoverinfo","layout","xaxis","range","moment","format","rangeselector","buttons","count","label","step","stepmode","rangeslider","yaxis","autorange","findLastAvailableDate","dataTrace","date","shouldSubtractMonth","i","newDate","split","day","subtractOneDay","parseInt","Math","sign","month","subtractOneMonth","toString","modifiedDate","join","dateIndex","indexOf","Colors","Fonts","FontWeight","Breakpoints","addCompaniesAction","companies","ADD_COMPANIES","payload","stocksReducer","state","action","ADD_COMPANY","findIndex","el","company","initialState","stocks","globalReducer","GlobalContext","createContext","dispatch","useStyles","makeStyles","theme","container","marginTop","linearProgress","CustomPlot","loading","dataTraces","classes","useState","selectedRange","setSelectedRange","average","averages","setAverages","useEffect","items","first","second","firstIndex","secondIndex","newYArray","reduce","acc","curr","getAverageValue","Grid","justify","className","LinearProgress","Container","fixed","config","autosizable","onRelayout","event","dateRange","handleRelayout","alignItems","direction","xs","Typography","style","padding","variant","component","index","toFixed","root","flexGrow","paper","spacing","textAlign","palette","secondary","image","position","top","left","zIndex","img","flex","maxWidth","Stocks","fixedOptions","useCookies","cookies","setCookie","removeCookie","countDown","setCountDown","setDataTraces","searchedCompanies","setSearchedCompany","errors","setErrors","setLoading","useContext","generateDataTraces","queryPromises","all","queryResponses","withoutError","filter","Note","message","shoreline","add","expires","toDate","companiesWithoutApiError","find","flatMap","countDownDate","setInterval","diff","clearInterval","utc","handleTextInput","ev","preventDefault","target","value","query","bestMatches","sm","alignContent","src","logo","alt","Autocomplete","multiple","id","disabled","onChange","newValue","option","handleAutoComplete","getOptionLabel","renderTags","tagValue","getTagProps","Chip","minWidth","renderInput","onSubmit","TextField","placeholder","Alert","IconButton","aria-label","onClick","fontSize","severity","Routes","data-testid","exact","path","Index","to","GlobalContextProvider","props","useReducer","Provider","children","appTheme","typography","fontFamily","FONT_FAMILY","fontWeightMedium","MEDIUM","body2","primary","main","PRIMARY_MAIN_COLOR","dark","PRIMARY_DARK_COLOR","SUCCESS_COLOR","error","ERROR_MAIN_COLOR","breakpoints","values","XS","SM","md","MD","lg","LG","xl","XL","createMuiTheme","App","CookiesProvider","window","renderShoreline","containerId","elem","document","getElementById","ReactDOM","render","unmountShoreline","unmountComponentAtNode","isRenderedByContainer","module","exports"],"mappings":"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","file":"static/js/main.74ccb727.chunk.js","sourcesContent":["export enum RoutePath {\n  Index = '/',\n  Stocks = '/stocks'\n}","import { baseRequestService } from '../baseRequestService';\n\nexport type Configuration = {\n  readonly basePath: string\n  readonly apiKey: string\n}\n\nconst BASE_PATH = \"https://www.alphavantage.co/query?\".replace(/\\/+$/, \"\");\n\nexport interface FetchArgs {\n  readonly url?: string\n  readonly options: any;\n}\n\nexport class RequiredError extends Error {\n  name: \"RequiredError\"\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n\nexport const AVApiFetchParamCreator = function (configuration: Configuration) {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize?: string, datatype?: string, options: any = {}): FetchArgs {\n      if (!symbol) {\n        throw new RequiredError('symbol', 'Required parameter symbol was null or undefined when calling getTimesSeriesDaily');\n      }\n\n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n      const localVarQueryParameter = {} as any;\n\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = configuration.apiKey;\n        localVarQueryParameter[\"apikey\"] = localVarApiKeyValue;\n        localVarQueryParameter[\"basePath\"] = configuration.basePath\n      }\n\n      localVarRequestOptions['params'] = {\n        apikey: localVarQueryParameter.apikey\n      }\n\n      localVarRequestOptions['params']['function'] = 'TIME_SERIES_DAILY'\n\n      if (symbol) {\n        localVarRequestOptions['params']['symbol'] = symbol\n      };\n\n      if (outputsize) {\n        localVarRequestOptions['params']['outputsize'] = outputsize\n      }\n\n      if (datatype) {\n        localVarRequestOptions['params']['datatype'] = datatype\n      }\n\n      return {\n        url: '',\n        options: localVarRequestOptions\n      }\n    },\n    searchSymbols(keywords: string, datatype?: string, options: any = {}): FetchArgs {\n      if (!keywords) {\n        throw new RequiredError('keywords', 'Required parameter keywords was null or undefined when calling searchSymbols');\n      }\n\n      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n      const localVarQueryParameter = {} as any;\n\n      if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = configuration.apiKey;\n        localVarQueryParameter[\"apikey\"] = localVarApiKeyValue;\n        localVarQueryParameter[\"basePath\"] = configuration.basePath\n      }\n\n      localVarRequestOptions['params'] = {\n        apikey: localVarQueryParameter.apikey\n      }\n\n      if (keywords) {\n        localVarRequestOptions['params']['keywords'] = keywords\n      }\n\n      localVarRequestOptions['params']['function'] = 'SYMBOL_SEARCH'\n\n\n      if (datatype) {\n        localVarRequestOptions['params']['datatype'] = datatype\n      }\n\n      return {\n        url: '',\n        options: localVarRequestOptions\n      }\n    }\n  }\n}\n\nconst AVApiFp = function (configuration?: Configuration) {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize?: string, datatype?: string, options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = AVApiFetchParamCreator(configuration!).getTimeSeriesDaily(symbol, outputsize, datatype, options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n    searchSymbols(keywords: string, datatype?: string, options?: any): (basePath?: string) => Promise<any> {\n      const localVarFetchArgs = AVApiFetchParamCreator(configuration!).searchSymbols(keywords, datatype, options);\n\n      return (basePath: string = BASE_PATH) => {\n        return baseRequestService(basePath + localVarFetchArgs.url, localVarFetchArgs.options)\n          .catch(err => {\n            throw err\n          })\n      };\n    },\n  }\n}\n\nexport const AVApiFactory = (configuration?: Configuration, basePath?: string) => {\n  return {\n    getTimeSeriesDaily(symbol: string, outputsize: string = 'full', datatype?: string, options?: any) {\n      return AVApiFp(configuration).getTimeSeriesDaily(symbol, outputsize, datatype, options)(basePath)\n    },\n    searchSymbols(keywords: string, datatype?: string, options?: any) {\n      return AVApiFp(configuration).searchSymbols(keywords, datatype, options)(basePath)\n    }\n  }\n}","import moment from \"moment\";\n\nexport type BestMatches = {\n  readonly '1. symbol'?: string\n  readonly '2. name'?: string\n  readonly '3. type'?: string\n  readonly '4. region'?: string\n  readonly '8. currency'?: string\n}\n\nexport enum BestMatchesEnum {\n  symbol = '1. symbol',\n  name = '2. name',\n  type = '3. type',\n  region = '4. region?',\n  currency = '8. currency?'\n}\n\nexport type MetaDataItem = {\n  readonly '1. Information': string\n  readonly '2. Symbol': string\n  readonly '3. Last Refreshed': string\n  readonly '4. Output Size': string\n  readonly '5. Time Zone': string\n}\n\nexport type TimeSeriesItem = {\n  readonly '1. open'?: string\n  readonly '2. high'?: string\n  readonly '3. low'?: string\n  readonly '4. close'?: string\n  readonly '5. volume'?: string\n}\n\nexport interface TimeSeriesDaily {\n  readonly 'Meta Data': MetaDataItem\n  readonly 'Time Series (Daily)': TimeSeriesItem[]\n  readonly 'Note'?: string\n}\n\nexport interface DataTraceItem {\n  x: string[]\n  y: string[]\n}\n\nexport interface DataTraceItemCustom extends DataTraceItem {\n  readonly type: any\n  readonly mode: any\n  readonly name: any\n  readonly line?: any\n  readonly text?: any\n  readonly hovertext?: any\n  readonly hoverinfo?: any\n  readonly title?: any\n  readonly textinfo?: any\n\n}\n\nexport const facebookBestMatch: BestMatches = {\n  '1. symbol': \"FB\",\n  '2. name': \"Facebook Inc.\",\n  '3. type': \"Equity\",\n  '4. region': \"United States\",\n  '8. currency': \"USD\",\n};\n\nexport const extractXY = (data: any): DataTraceItem => {\n  const x: string[] = Object.keys(data);\n  const y: string[] = Object.keys(data).map((item: string) => {\n    let key: any = Object.keys(data[item])[0];\n    return data[item][key];\n  })\n\n  return {\n    x, y\n  }\n}\n\nexport const generateDataTracesDomain = (item: TimeSeriesDaily): DataTraceItemCustom => {\n  const { x, y } = extractXY(item[\"Time Series (Daily)\"]);\n  const trace = {\n    x,\n    y,\n    type: \"scatter\",\n    mode: \"lines\",\n    name: item[\"Meta Data\"][\"2. Symbol\"],\n    line: {\n      color: 'rgb(55, 128, 191)',\n      width: 1\n    },\n    marker: {\n      color: 'pink',\n      size: 1\n    },\n    textinfo: 'label+text',\n    text: item[\"Meta Data\"][\"2. Symbol\"],\n    hoverinfo: 'x+y+text',\n  }\n\n  return trace;\n}\n\nexport const layout: any = {\n  xaxis: {\n    range: ['2010-02-17', moment().format('YYYY-MM-DD')],\n    color: 'black',\n    rangeselector: {\n      buttons: [\n        {\n          count: 1,\n          label: '1m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        {\n          count: 6,\n          label: '6m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        { step: 'all' }\n      ]\n    },\n    rangeslider: { range: ['2010-02-17', moment().format('YYYY-MM-DD')] },\n    type: 'date'\n  },\n  yaxis: {\n    color: 'black',\n    autorange: true,\n    range: [86.8700008333, 138.870004167],\n    type: 'linear+marks'\n  }\n};\n\nconst findLastAvailableDate = (dataTrace: string[], date: string) => {\n  let shouldSubtractMonth = false;\n  for (let i = 0; i <= 6; i++) {\n    let newDate = date.split('-');\n    let day = newDate[2];\n    let subtractOneDay: any = parseInt(day, 10) - i;\n    if (Math.sign(subtractOneDay) === -1) {\n      subtractOneDay = 0;\n      shouldSubtractMonth = true\n    }\n\n    if (shouldSubtractMonth) {\n      let month = newDate[1];\n      let subtractOneMonth: any = parseInt(month, 10) - 1;\n      if (Math.sign(subtractOneMonth) === -1) {\n        subtractOneMonth = 0;\n      }\n      if (subtractOneMonth < 10) {\n        subtractOneMonth = ('0' + subtractOneMonth).slice(-2)\n      };\n    }\n\n    if (subtractOneDay < 10) {\n      subtractOneDay = ('0' + subtractOneDay).slice(-2)\n    };\n\n    newDate[2] = subtractOneDay.toString();\n\n    let modifiedDate: string = newDate.join('-');\n    let dateIndex = dataTrace.indexOf(modifiedDate)\n\n    if (dateIndex !== -1) {\n      return dateIndex\n    }\n  }\n\n  return 0\n}\n\nexport type AverageObject = {\n  readonly name?: string\n  readonly average: number\n}\n\nexport const getAverageValue = (items: DataTraceItemCustom[], range: string[]): AverageObject[] => {\n  if (!range[0] || !range[1]) {\n    return [{\n      name: ' ',\n      average: 0\n    }]\n  }\n  const [first, second] = range.map((item) => moment(item).format('YYYY-MM-DD').split(' ')[0]);\n\n  let averages = items.map((dataTrace: DataTraceItemCustom) => {\n    let firstIndex = dataTrace.x.indexOf(first);\n\n    let secondIndex = dataTrace.x.indexOf(second);\n\n    if (secondIndex === -1) {\n      if (firstIndex === -1) {\n        secondIndex = findLastAvailableDate(dataTrace.x, second)\n      } else {\n        secondIndex = 0\n      }\n    }\n    if (firstIndex === -1) {\n\n      firstIndex = findLastAvailableDate(dataTrace.x, first)\n      if (firstIndex === 0) firstIndex = dataTrace.x.length - 1\n    }\n\n    let newYArray = dataTrace.y.slice(secondIndex, firstIndex);\n\n    if (newYArray) {\n      let sum = newYArray.reduce((acc, curr) => { return acc + parseInt(curr, 10) }, 0);\n      let average = sum / (firstIndex - secondIndex);\n      return {\n        name: dataTrace.name,\n        average\n      }\n    }\n\n    return {\n      name: '',\n      average: 0\n    }\n  });\n\n  return averages\n}","import axios, { AxiosRequestConfig } from 'axios';\n\nconst parseParams = (params: any) => {\n  const keys = Object.keys(params);\n  let options = '';\n\n  keys.forEach((key) => {\n    const isParamTypeObject = typeof params[key] === 'object';\n    const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n\n    if (!isParamTypeObject) {\n      options += `${key}=${params[key]}&`;\n    }\n\n    if (isParamTypeObject && isParamTypeArray) {      \n      params[key].forEach((element: any) => {\n        options += `${key}=${element}&`;\n      });\n    }\n  });\n\n  return options ? options.slice(0, -1) : options;\n};\n\nconst baseRequestService = async (\n  endpoint: string,\n  options: AxiosRequestConfig\n): Promise<any> => {\n    try {\n      if (!endpoint || !options?.method) {\n        return Promise.reject(\"Please enter endpoint\")\n      };\n\n      if (options.method === 'GET') {\n\n        options['paramsSerializer'] = params => {\n          return  parseParams(params)\n        }\n      }\n\n      return axios(endpoint, options).then(response=> {\n        return response.data\n      })\n    } catch (err) {\n      \n      console.log('err', err)\n      return Promise.reject(err);\n    }\n \n};\n\nexport {\n  baseRequestService\n};\n","import { AVApiFactory } from './api';\n\nconst config = {\n  apiKey: 'PBZQEWAEXCFONYE9',\n  basePath: 'https://www.alphavantage.co/query?'\n}\n\nconst ApiFactory = AVApiFactory(config)\n\nexport default ApiFactory;","import { BestMatches } from 'domain/Stock';\nimport { Action } from '../../Action';\n\nexport enum StocksActionType {\n  ADD_COMPANY = 'ADD_COMPANY',\n  ADD_COMPANIES = 'ADD_COMPANIES'\n}\n\nexport interface AddCompanyAction extends Action {\n  type: StocksActionType.ADD_COMPANY,\n  payload: {\n    company: BestMatches\n  }\n}\n\nconst addCompanyAction = (\n  company: BestMatches\n): AddCompanyAction => ({\n  type: StocksActionType.ADD_COMPANY,\n  payload: {\n    company\n  }\n})\n\nexport interface AddCompaniesAction extends Action {\n  type: StocksActionType.ADD_COMPANIES,\n  payload: {\n    companies: BestMatches[]\n  }\n}\n\nconst addCompaniesAction = (\n  companies: BestMatches[]\n): AddCompaniesAction => ({\n  type: StocksActionType.ADD_COMPANIES,\n  payload: {\n    companies\n  }\n})\n\nexport type StocksAction = AddCompanyAction | AddCompaniesAction\n\nexport {\n  addCompanyAction,\n  addCompaniesAction\n};","export enum Colors {\n  PRIMARY_MAIN_COLOR = '#0f99d6',\n  PRIMARY_DARK_COLOR = '#034694',\n  SUCCESS_COLOR = '#8dc63f',\n  ERROR_MAIN_COLOR = '#ff0000',\n  SWITCH_LIGHT_BLUE = '#cfebf7',\n  SWITCH_LIGHT_GREY = '#b0b0b0',\n  SWITCH_DISABLED_GREY = '#efefef',\n  SWITCH_DARK_GREY = '#505050',\n  BLACK_MEDIUM = 'rgba(0, 0, 0, 0.8)',\n  WHITE = '#fff',\n  BLACK = '#000',\n  CARD_BORDER = '#f0f0f0'\n}\n\nexport enum Fonts {\n  FONT_FAMILY = '\"Open Sans\", \"Helvetica\", \"Arial\", sans-serif'\n}\nexport enum FontWeight {\n  MEDIUM = 600\n}\n\nexport enum Breakpoints {\n  XS = 0,\n  SM = 576,\n  MD = 768,\n  LG = 992,\n  XL = 1200\n}\n\nexport const appTheme = {\n  typography: {\n    fontFamily: Fonts.FONT_FAMILY,\n    fontWeightMedium: FontWeight.MEDIUM,\n    body2: {\n      fontSize: '0.75rem'\n    }\n  },\n  palette: {\n    primary: {\n      main: Colors.PRIMARY_MAIN_COLOR,\n      dark: Colors.PRIMARY_DARK_COLOR\n    },\n    secondary: {\n      main: Colors.SUCCESS_COLOR\n    },\n    error: {\n      main: Colors.ERROR_MAIN_COLOR\n    }\n  },\n  breakpoints: {\n    values: {\n      xs: Breakpoints.XS,\n      sm: Breakpoints.SM,\n      md: Breakpoints.MD,\n      lg: Breakpoints.LG,\n      xl: Breakpoints.XL\n    }\n  }\n};\n","import { BestMatches, BestMatchesEnum } from 'domain/Stock';\nimport { StocksAction, StocksActionType } from './stocks-actions';\n\nexport interface StocksState {\n  companies: BestMatches[]\n};\n\nexport const stocksInitialState: StocksState = {\n  companies: [\n    {\n      '1. symbol': \"FB\",\n      '2. name': \"Facebook Inc.\",\n      '3. type': \"Equity\",\n      '4. region': \"United States\",\n      '8. currency': \"USD\",\n    }\n  ]\n};\n\nexport const stocksReducer = (\n  state: StocksState,\n  action: StocksAction\n): StocksState => {\n  switch (action.type) {\n    case StocksActionType.ADD_COMPANY:\n      let index = state.companies.findIndex(el => el[BestMatchesEnum.symbol] === action.payload.company[BestMatchesEnum.symbol]);\n\n      if (index === -1) {\n        return {\n          companies: [...state.companies, action.payload.company]\n        }\n      };\n\n      return state;\n    case StocksActionType.ADD_COMPANIES:\n      return {\n        companies: [...action.payload.companies]\n      };\n    default:\n      return state;\n  }\n}","import { AnyAction } from '../AnyAction';\nimport { stocksInitialState, stocksReducer, StocksState } from './stocks/stocks-reducer';\n\nexport interface GlobalState {\n  stocks: StocksState\n}\n\nexport const initialState: GlobalState = {\n  stocks: stocksInitialState\n};\n\nexport const globalReducer = (\n  state: GlobalState,\n  action: AnyAction\n) : GlobalState => {\n  const { stocks } = state;\n\n  return {\n    stocks: stocksReducer(stocks, action)\n  }\n};\n","import { createContext, Dispatch, useContext } from 'react';\n\nimport { GlobalState, initialState} from './global-reducer';\nimport { Action } from '../Action';\n\nexport interface GlobalContextValue extends GlobalState {\n  dispatch: Dispatch<Action>\n};\n\nexport const GlobalContext = createContext<GlobalContextValue>({\n  ...initialState,\n  dispatch: () => {}\n});\n\nexport const useGlobalContext = (): GlobalContextValue =>\n  useContext(GlobalContext);\n","import React, { useState, useEffect } from 'react';\nimport Plot from 'react-plotly.js';\n\nimport { Container, Grid, LinearProgress, makeStyles, Typography } from '@material-ui/core';\n\nimport { AverageObject, DataTraceItemCustom, getAverageValue, layout } from 'domain/Stock'\nimport moment from 'moment';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: 10\n  },\n  linearProgress: {\n    width: '70%'\n  }\n}));\n\ninterface CustomPlotProps {\n  readonly loading: boolean\n  readonly dataTraces: DataTraceItemCustom[]\n}\n\nexport const CustomPlot = ({\n  loading,\n  dataTraces\n}: CustomPlotProps) => {\n  const classes = useStyles();\n\n  const [selectedRange, setSelectedRange] = useState<any[]>([moment('2010-02-17').format('YYYY-MM-DD'), moment().format('YYYY-MM-DD')])\n  const [averages, setAverages] = useState<AverageObject[]>([{\n    name: '',\n    average: 0\n  }]);\n\n  useEffect(() => {\n    let average: AverageObject[] = getAverageValue(dataTraces, selectedRange);\n\n    setAverages(average)\n  }, [selectedRange])\n\n  const handleRelayout = (item: any) => {\n    if (item['xaxis.range']) {\n      setSelectedRange(item['xaxis.range'])\n    } else {\n      const keys: any = Object.keys(item);\n      let dateRange = keys.map((key: any) => {\n        console.log(item[key]);\n        return item[key];\n      });\n\n      if (dateRange.length === 2) setSelectedRange(dateRange)\n    }\n  };\n\n  if (loading) return (\n    <Grid container justify=\"center\" className={classes.container}>\n      <LinearProgress className={classes.linearProgress} />\n      <LinearProgress color=\"primary\" className={classes.linearProgress} />\n    </Grid>\n  )\n\n  return (\n    <Container fixed>\n\n      <Plot\n        data={dataTraces || []}\n        layout={layout}\n        config={{\n          // responsive: true,\n          autosizable: true,\n        }}\n        onRelayout={(event: any) => handleRelayout(event)}\n\n      />\n\n      <Grid\n        item\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n        xs={12}\n      >\n        <Typography style={{ padding: 10 }} variant=\"h4\" component=\"h4\" color=\"primary\">\n          Selected Range\n        </Typography>\n        <Grid container\n          justify=\"center\"\n          alignItems=\"center\"\n\n          item xs={12}\n          direction=\"row\">\n\n          {selectedRange.map((date: string, index: number) =>\n            <Typography key={index} style={{ padding: 10 }} variant=\"h6\" component=\"h6\" >\n              {moment(date).format('YYYY-MMMM-DD')}\n            </Typography>\n          )}\n        </Grid>\n\n        {averages.map((item: AverageObject, index: number) =>\n          <Typography key={index} style={{ padding: 10 }} variant=\"h6\" component=\"h6\" color=\"secondary\" >\n            Average for {item.name} : {item.average.toFixed(3)}\n          </Typography>\n        )}\n      </Grid>\n\n\n\n    </Container>\n  )\n\n}\n","import React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport moment from 'moment';\nimport { Alert } from '@material-ui/lab';\n\nimport { Chip, Container, Grid, IconButton, makeStyles, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ApiFactory from '../../services/alphavintage-api';\nimport { BestMatches, BestMatchesEnum, DataTraceItemCustom, facebookBestMatch, generateDataTracesDomain, TimeSeriesDaily } from 'domain/Stock'\nimport { BasicError } from 'domain/Global'\nimport { useGlobalContext } from 'context/global/GlobalContext';\nimport { addCompaniesAction } from 'context/global/stocks/stocks-actions';\nimport logo from '../../assets/stock-market_1.png'\nimport { CustomPlot } from './CustomPlot';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  container: {\n    marginTop: 10\n  },\n  image: {\n    position: 'absolute',\n    top: 0,\n    left: 20,\n    zIndex: -2,\n    width: 300\n  },\n  img: {\n    flex: 1,\n    padding: 5,\n    maxWidth: '25%'\n  },\n  linearProgress: {\n    width: '70%'\n  }\n}));\n\nexport const Stocks = () => {\n  const classes = useStyles();\n  const fixedOptions: BestMatches[] = [facebookBestMatch];\n\n  const [cookies, setCookie, removeCookie] = useCookies(['shoreline']); \n\n  const [countDown, setCountDown] = useState<string>('');\n  const [dataTraces, setDataTraces] = useState<DataTraceItemCustom[]>([]);\n  const [searchedCompanies, setSearchedCompany] = useState<BestMatches[]>([]);\n  const [errors, setErrors] = useState<BasicError[]>()\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const {\n    stocks: {\n      companies\n    },\n    dispatch\n  } = useGlobalContext();\n\n  const generateDataTraces = async () => {\n    try {\n        setLoading(true)\n        let queryPromises: Promise<TimeSeriesDaily>[] = companies.map((item: BestMatches) => ApiFactory.getTimeSeriesDaily(item[BestMatchesEnum.symbol]!))\n        let queryResponses: TimeSeriesDaily[] = await Promise.all(queryPromises);\n        let withoutError = queryResponses.filter((item: TimeSeriesDaily) => !item.Note);\n\n        if (queryResponses.length !== withoutError.length) {\n          setErrors([{\n            message: 'Thank you for using Shoreline! Our standard API call frequency is 5 calls per minute and 500 calls per day.'\n          }])\n\n        if (!cookies.shoreline) {\n          setCookie('shoreline', moment().add(1, 'minutes'), {\n            expires: moment().add(1, 'minutes').toDate()\n          });\n\n        }\n\n        let companiesWithoutApiError = companies.filter((company: BestMatches) =>\n          withoutError.find((item: TimeSeriesDaily) => company[\"1. symbol\"] === item[\"Meta Data\"][\"2. Symbol\"])\n        )\n\n        dispatch(addCompaniesAction(companiesWithoutApiError))\n        setLoading(false)\n\n      } else {\n        let dataTraces: DataTraceItemCustom[] = withoutError.flatMap((item: TimeSeriesDaily) =>\n          item[\"Time Series (Daily)\"] ? generateDataTracesDomain(item) : []\n        );\n\n        setDataTraces(dataTraces)\n        setLoading(false)\n      }\n    } catch (err) {\n      setErrors([{\n        message: 'Something went wrong, please try again'\n      }])\n    }\n  }\n\n  useEffect(() => {\n    generateDataTraces();\n  }, [companies]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (cookies.shoreline) {\n      let countDownDate = moment(cookies.shoreline);\n\n      let x = setInterval(function () {\n        let diff = countDownDate.diff(moment());\n\n        if (diff <= 0) {\n          clearInterval(x);\n          setCountDown('')\n        } else\n          setCountDown(moment.utc(diff).format(\"HH:mm:ss\"))\n\n      }, 1000);\n    } else {\n      setErrors([])\n    }\n  }, [cookies]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (countDown === '') {\n      removeCookie('shoreline');\n    };\n  }, [countDown]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleTextInput = async (ev: any) => {\n    try {\n      ev.preventDefault();\n      if (!ev.target[0].value) return;\n\n      let query = ev.target[0].value\n      let {\n        bestMatches\n      }: {\n        bestMatches: BestMatches[]\n      } = await ApiFactory.searchSymbols(query);\n\n      setSearchedCompany(bestMatches);\n    } catch (err) {\n      setErrors([{\n        message: 'Something went wrong, please try again'\n      }])\n    }\n  }\n\n  const handleAutoComplete = (newValue: BestMatches[]) => {\n    dispatch(addCompaniesAction([\n      ...newValue.filter((option: BestMatches) => fixedOptions.indexOf(option) === -1!),\n    ]))\n  }\n\n  return (\n    <div>\n      <Container >\n        <Grid\n          container\n          justify=\"space-around\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <img src={logo} className={classes.img} alt=\"logo\" />\n          <Autocomplete\n            multiple\n            id=\"fixed-tags-demo\"\n            value={companies || []}\n            disabled={!!cookies.shoreline}\n            onChange={(event, newValue) => handleAutoComplete(newValue)}\n            options={searchedCompanies}\n            getOptionLabel={(option: BestMatches) => option[\"2. name\"]!}\n            renderTags={(tagValue, getTagProps) =>\n              tagValue.map((option, index) => (\n                <Chip\n                  label={option[\"1. symbol\"]}\n                  {...getTagProps({ index })}\n                  disabled={fixedOptions.indexOf(option) !== -1}\n                />\n              ))\n            }\n            style={{ minWidth: '50vw' }}\n            renderInput={(params) => (\n              <form onSubmit={handleTextInput}>\n                <TextField\n                  {...params}\n                  id=\"filled-basic\"\n                  label=\"Search Company\"\n                  variant=\"outlined\"\n                  placeholder={`Search Company`} />\n              </form>\n            )}\n          />\n        </Grid>\n\n        <Grid\n          container\n          justify=\"center\"\n          item sm\n          xs={12}\n          alignContent=\"center\"\n          alignItems=\"center\"\n        >\n          <div>\n            {errors && errors.map((item: BasicError) => (\n              <Alert\n                action={\n                  <IconButton\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    size=\"small\"\n                    onClick={() => {\n                      setErrors([...errors.filter((err: BasicError) => item.message !== err.message)]);\n                    }}\n                  >\n                    <CloseIcon fontSize=\"inherit\" />\n                  </IconButton>\n                }\n                severity=\"error\">{item.message} </Alert>\n            ))}\n          </div>\n          {cookies.shoreline ?\n            <Alert severity=\"info\">Api available again in {countDown}</Alert> : ''\n          }\n        </Grid>\n\n          <CustomPlot \n            loading={loading}\n            dataTraces={dataTraces || []}\n          />\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { RoutePath } from '../../config/route-config';\nimport { Stocks } from 'components/stocks/Stocks';\n\nexport const routesTestId = 'RoutesComponent';\n\nexport const Routes = () => (\n  <div data-testid={routesTestId}>\n    <Switch>\n      <Route exact path={RoutePath.Index}>\n        <Stocks/>\n      </Route>\n\n      <Route path={RoutePath.Index}>\n        <Redirect to={RoutePath.Index}/>\n      </Route>\n    </Switch>\n  </div>\n);\n","import React, { useReducer, ReactNode } from 'react';\n\nimport { globalReducer, GlobalState, initialState } from './global-reducer';\nimport { GlobalContext } from './GlobalContext';\n\nexport const GlobalContextProvider = (props: { children: ReactNode }) => {\n  const [state, dispatch]: [GlobalState, any]= useReducer(globalReducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={{ ...state, dispatch }}>\n      {props.children}\n    </GlobalContext.Provider>\n  )\n};","import React from 'react';\nimport './App.css';\nimport { CookiesProvider } from 'react-cookie';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nimport { Routes } from './Routes';\nimport { GlobalContextProvider } from 'context/global/GlobalContextProvider';\nimport { appTheme } from 'config/style-config';\n\nconst theme = createMuiTheme(appTheme);\n\nconst App = (props: any) => {\n  return (\n    <div className=\"App\">\n      <CookiesProvider>\n        <MuiThemeProvider theme={theme}>\n          <BrowserRouter >\n            <GlobalContextProvider>\n              <Routes />\n            </GlobalContextProvider>\n          </BrowserRouter>\n        </MuiThemeProvider>\n      </CookiesProvider>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/app/App';\n\nwindow.renderShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n\n  if (elem) {\n    ReactDOM.render(<App/>, elem);\n  }\n};\n\nwindow.unmountShoreline = (containerId: string) => {\n  const elem = document.getElementById(containerId);\n  if (elem) {\n    ReactDOM.unmountComponentAtNode(elem);\n  }\n};\n\nif (!window.isRenderedByContainer) {\n\n  window.renderShoreline('root');\n\n}\n","module.exports = __webpack_public_path__ + \"static/media/stock-market_1.f7b82519.png\";"],"sourceRoot":""}